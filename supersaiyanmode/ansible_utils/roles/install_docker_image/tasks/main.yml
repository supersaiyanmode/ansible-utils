---
- include_role:
    name: install_packages
  vars:
    packages:
      - ca-certificates
      - curl
      - gnupg2
      - lsb-release
      - python3-docker

- name: Add Apt key
  shell: curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc

- name: Update perms on key
  file:
    path: /etc/apt/keyrings/docker.asc
    mode: u=rw,g=r,o=r

- name: Add the repo to apt sources
  shell: >
    echo
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

- include_role:
    name: install_packages
  vars:
    packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin

- name: start and enable docker daemon
  service:
    name: docker
    state: started
    enabled: yes

- name: start and enable containerd daemon
  service:
    name: containerd
    state: started
    enabled: yes

- name: Create storage location
  file:
    path: /docker/{{container_name}}
    state: directory

- name: Join folders
  set_fact:
    mapped_paths: >
      {{ container_mounts
         | map('regex_replace', '/', '-')
         | map('regex_replace', '^-', '')
         | map('regex_replace', '^', '/docker/' + container_name + '/')
         | zip(container_mounts)
         | map('join', ':') }}

- name: Get UIDs of users
  getent:
    database: passwd
  when: user is defined

- name: "Login into {{ container_registry.host }}"
  docker_login:
    registry: "{{ container_registry.host }}"
    username: "{{ container_registry.username }}"
    password: "{{ lookup('env', container_registry.password_env_key) }}"
  when: container_registry is defined

- name: "Ensure {{ container_name }} container is running"
  docker_container:
    name: "{{ container_name }}"
    image: "{{ container_image }}"
    restart_policy: unless-stopped
    ports: "{{ container_ports }}"
    volumes: "{{ mapped_paths + custom_mounts }}"
    env: "{{ env }}"
    user: "{{ getent_passwd[user].1 | default(omit) }}"
    network_mode: "{{ network_mode }}"
    capabilities: "{{ capabilities | default(omit) }}"
  vars:

- name: "Setup {{ container_name }}"
  community.docker.docker_container_exec:
    container: "{{ container_name }}"
    command: "{{ item }}"
    user: root
  loop: "{{ setup_commands }}"
  when: setup_commands is defined

- name: "Enable reverse proxy for {{ container_name }}"
  include_role:
    name: install_http
    tasks_from: install_reverse_proxy
  vars:
    name: "{{ container_name }}"
    port: "{{ main_port }}"
    host: "{{ lookup('env', 'MAIN_HOST_NAME') }}"
    enable_ws: true
  when: main_port is defined
